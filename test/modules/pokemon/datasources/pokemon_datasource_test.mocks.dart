// Mocks generated by Mockito 5.4.0 from annotations
// in snapfi_app/test/modules/pokemon/datasources/pokemon_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:snapfi_app/modules/snapfi_app/data/datasources/pokemon_datasource.dart'
    as _i3;
import 'package:snapfi_app/modules/snapfi_app/domain/http_helper.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpHelper_0 extends _i1.SmartFake implements _i2.HttpHelper {
  _FakeHttpHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PokemonDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonDatasource extends _i1.Mock implements _i3.PokemonDatasource {
  @override
  _i4.Future<_i2.HttpHelper> pokemons({int? limit}) => (super.noSuchMethod(
        Invocation.method(
          #pokemons,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<_i2.HttpHelper>.value(_FakeHttpHelper_0(
          this,
          Invocation.method(
            #pokemons,
            [],
            {#limit: limit},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.HttpHelper>.value(_FakeHttpHelper_0(
          this,
          Invocation.method(
            #pokemons,
            [],
            {#limit: limit},
          ),
        )),
      ) as _i4.Future<_i2.HttpHelper>);
  @override
  _i4.Future<_i2.HttpHelper> pokemon({String? filter}) => (super.noSuchMethod(
        Invocation.method(
          #pokemon,
          [],
          {#filter: filter},
        ),
        returnValue: _i4.Future<_i2.HttpHelper>.value(_FakeHttpHelper_0(
          this,
          Invocation.method(
            #pokemon,
            [],
            {#filter: filter},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.HttpHelper>.value(_FakeHttpHelper_0(
          this,
          Invocation.method(
            #pokemon,
            [],
            {#filter: filter},
          ),
        )),
      ) as _i4.Future<_i2.HttpHelper>);
}
